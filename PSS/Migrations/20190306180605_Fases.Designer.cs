// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PSS.Data;
using System;

namespace PSS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190306180605_Fases")]
    partial class Fases
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PSS.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PSS.Models.Empresa", b =>
                {
                    b.Property<int>("EmpresaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CIF")
                        .IsRequired()
                        .HasMaxLength(9);

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250);

                    b.Property<string>("EmailContacto")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("Estado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("EmpresaId");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("PSS.Models.Fases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("IdFase");

                    b.Property<int>("IdProyecto");

                    b.HasKey("Id");

                    b.ToTable("Fases");
                });

            modelBuilder.Entity("PSS.Models.Provincias", b =>
                {
                    b.Property<int>("IdProvincia")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Provincia");

                    b.HasKey("IdProvincia");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("PSS.Models.Proyectos", b =>
                {
                    b.Property<int>("IdObra")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AccesosRodados");

                    b.Property<bool>("Alcantarillado");

                    b.Property<string>("Autor");

                    b.Property<string>("AutorProyecto");

                    b.Property<string>("CaracteristicasTerreno");

                    b.Property<bool>("CirculacionesPeatonales");

                    b.Property<string>("CiudadContratista");

                    b.Property<string>("CiudadObra");

                    b.Property<string>("Cliente");

                    b.Property<string>("Climatologia");

                    b.Property<bool>("ConduccionesGas");

                    b.Property<string>("Contratista");

                    b.Property<string>("CpContratista");

                    b.Property<string>("CpObra");

                    b.Property<string>("CssfaseProyecto");

                    b.Property<string>("DescripcionLugar");

                    b.Property<string>("DescripcionObra");

                    b.Property<string>("DireccionContratista");

                    b.Property<string>("DireccionObra");

                    b.Property<int?>("Duracion");

                    b.Property<string>("Empresa");

                    b.Property<string>("Encargado");

                    b.Property<int>("IdEmpre");

                    b.Property<bool>("InstProviAreasAux");

                    b.Property<string>("JefeObra");

                    b.Property<bool>("LinElectAereas");

                    b.Property<bool>("LinElectEnterradas");

                    b.Property<string>("LinderoEste");

                    b.Property<string>("LinderoNorte");

                    b.Property<string>("LinderoOeste");

                    b.Property<string>("LinderoSur");

                    b.Property<bool>("LineasTelefonicas");

                    b.Property<string>("NombreObra");

                    b.Property<string>("NumOt");

                    b.Property<int?>("NumTrabajadores");

                    b.Property<string>("PemPec");

                    b.Property<decimal?>("Presupuesto");

                    b.Property<string>("Promotor");

                    b.Property<string>("ProvinciaContratista");

                    b.Property<string>("ProvinciaObra");

                    b.Property<string>("RecursoPreventivo");

                    b.Property<string>("Superficie");

                    b.Property<string>("Tecnico");

                    b.Property<string>("TipoEstudio");

                    b.Property<string>("TipoObra");

                    b.Property<string>("TraficoRodado");

                    b.Property<bool>("Transformadores");

                    b.HasKey("IdObra");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("PSS.Models.UsuarioEmpresa", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmpresaId");

                    b.HasKey("Id");

                    b.ToTable("UsuarioEmpresa");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PSS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PSS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PSS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PSS.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
